{"ast":null,"code":"import _classCallCheck from \"/home/joshua/Desktop/MainFolder/OuClasses/Spring 2023/Software Engineering/CoinFlipStockPredictor/StockChart/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/joshua/Desktop/MainFolder/OuClasses/Spring 2023/Software Engineering/CoinFlipStockPredictor/StockChart/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/joshua/Desktop/MainFolder/OuClasses/Spring 2023/Software Engineering/CoinFlipStockPredictor/StockChart/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/joshua/Desktop/MainFolder/OuClasses/Spring 2023/Software Engineering/CoinFlipStockPredictor/StockChart/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/joshua/Desktop/MainFolder/OuClasses/Spring 2023/Software Engineering/CoinFlipStockPredictor/StockChart/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/joshua/Desktop/MainFolder/OuClasses/Spring 2023/Software Engineering/CoinFlipStockPredictor/StockChart/src/Stock.js\";\n// import React, { useState } from \"react\";\n// import Plot from \"react-plotly.js\";\n\n// class Stock extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       stockChartXValues: [],\n//       stockChartYValues: [],\n//     };\n//     this.symb = props.sign;\n//   }\n\n//   componentDidMount() {\n//     this.fetchStock();\n//   }\n\n//   fetchStock() {\n//     const pointerToThis = this;\n//     console.log(pointerToThis);\n//     const API_KEY = \"HGJWFG4N8AQ66ICD\";\n\n//     let StockSymbol = pointerToThis.symb;\n//     let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${StockSymbol}&outputsize=compact&apikey=${API_KEY}`;\n\n//     let stockChartXValuesFunction = [];\n//     let stockChartYValuesFunction = [];\n\n//     fetch(API_Call)\n//       .then(function(response) {\n//         return response.json();\n//       })\n//       .then(function(data) {\n//         console.log(data);\n\n//         for (var key in data[\"Time Series (Daily)\"]) {\n//           stockChartXValuesFunction.push(key);\n//           stockChartYValuesFunction.push(\n//             data[\"Time Series (Daily)\"][key][\"1. open\"]\n//           );\n//         }\n\n//         // console.log(stockChartXValuesFunction);\n//         pointerToThis.setState({\n//           stockChartXValues: stockChartXValuesFunction,\n//           stockChartYValues: stockChartYValuesFunction,\n//         });\n//       });\n//   }\n\n//   render() {\n//     return (\n//       <div>\n//         <Plot\n//           data={[\n//             {\n//               x: this.state.stockChartXValues,\n//               y: this.state.stockChartYValues,\n//               type: \"scatter\",\n//               mode: \"lines+markers\",\n//               marker: { color: \"red\" },\n//             },\n//           ]}\n//           layout={{\n//             width: 720,\n//             height: 440,\n//             title: `${this.symb} Chart`,\n//           }}\n//         />\n//         <p>The prediction is that this stock goes up in price.</p>\n//       </div>\n//     );\n//   }\n// }\n\n// export default Stock;\n\n// CHAT GPT DID THIS\n// import React, { Component } from \"react\";\n// import Plot from \"react-plotly.js\";\n// import Prediction from \"./Prediction\";\n\n// class Stock extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       stockChartXValues: [],\n//       stockChartYValues: [],\n//     };\n//   }\n\n//   componentDidMount() {\n//     this.fetchStock(this.props.sign);\n//   }\n\n//   componentDidUpdate(prevProps) {\n//     if (this.props.sign !== prevProps.sign) {\n//       this.fetchStock(this.props.sign);\n//     }\n//   }\n\n//   fetchStock(StockSymbol) {\n//     const API_KEY = \"HGJWFG4N8AQ66ICD\";\n\n//     let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${StockSymbol}&outputsize=compact&apikey=${API_KEY}`;\n\n//     let stockChartXValuesFunction = [];\n//     let stockChartYValuesFunction = [];\n\n//     fetch(API_Call)\n//       .then(function(response) {\n//         return response.json();\n//       })\n//       .then(\n//         function(data) {\n//           console.log(data);\n\n//           for (var key in data[\"Time Series (Daily)\"]) {\n//             stockChartXValuesFunction.push(key);\n//             stockChartYValuesFunction.push(\n//               data[\"Time Series (Daily)\"][key][\"1. open\"]\n//             );\n//           }\n\n//           this.setState({\n//             stockChartXValues: stockChartXValuesFunction,\n//             stockChartYValues: stockChartYValuesFunction,\n//           });\n//         }.bind(this)\n//       );\n//   }\n\n//   render() {\n//     return (\n//       <div>\n//         <Plot\n//           data={[\n//             {\n//               x: this.state.stockChartXValues,\n//               y: this.state.stockChartYValues,\n//               type: \"scatter\",\n//               mode: \"lines+markers\",\n//               marker: { color: \"red\" },\n//             },\n//           ]}\n//           layout={{\n//             width: 720,\n//             height: 440,\n//             title: `${this.props.sign} Chart`,\n//           }}\n//         />\n//         <div>\n//           The prediction is that this stock goes{\" \"}\n//           <span style={{ whiteSpace: \"nowrap\" }}>\n//             <Prediction pred=\"2\" />\n//           </span>{\" \"}\n//           in price.\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default Stock;\n\n// import React, { Component } from \"react\";\n// import Plot from \"react-plotly.js\";\n// import Prediction from \"./Prediction\";\n\n// class Stock extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       stockChartXValues: [],\n//       stockChartYValues: [],\n//       prediction: null, // set initial value of prediction to null\n//     };\n//   }\n\n//   componentDidMount() {\n//     this.fetchStock(this.props.sign);\n//   }\n\n//   componentDidUpdate(prevProps) {\n//     if (this.props.sign !== prevProps.sign) {\n//       this.fetchStock(this.props.sign);\n//     }\n//   }\n\n//   fetchStock(StockSymbol) {\n//     const API_KEY = \"HGJWFG4N8AQ66ICD\";\n\n//     let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${StockSymbol}&outputsize=compact&apikey=${API_KEY}`;\n\n//     let stockChartXValuesFunction = [];\n//     let stockChartYValuesFunction = [];\n\n//     fetch(API_Call)\n//       .then(function(response) {\n//         return response.json();\n//       })\n//       .then(\n//         function(data) {\n//           console.log(data);\n\n//           for (var key in data[\"Time Series (Daily)\"]) {\n//             stockChartXValuesFunction.push(key);\n//             stockChartYValuesFunction.push(\n//               data[\"Time Series (Daily)\"][key][\"1. open\"]\n//             );\n//           }\n\n//           this.setState({\n//             stockChartXValues: stockChartXValuesFunction,\n//             stockChartYValues: stockChartYValuesFunction,\n//             prediction: \"2\", // update prediction when new stock data is fetched\n//           });\n//         }.bind(this)\n//       );\n//   }\n\n//   render() {\n//     return (\n//       <div>\n//         <Plot\n//           data={[\n//             {\n//               x: this.state.stockChartXValues,\n//               y: this.state.stockChartYValues,\n//               type: \"scatter\",\n//               mode: \"lines+markers\",\n//               marker: { color: \"red\" },\n//             },\n//           ]}\n//           layout={{\n//             width: 720,\n//             height: 440,\n//             title: `${this.props.sign} Chart`,\n//           }}\n//         />\n//         {this.props.sign &&\n//         this.state.prediction !== null && ( // render prediction only when sign is truthy and prediction is not null\n//             <div>\n//               The prediction is that this stock goes{\" \"}\n//               <span style={{ whiteSpace: \"nowrap\" }}>\n//                 <Prediction pred={this.state.prediction} />\n//               </span>{\" \"}\n//               in price.\n//             </div>\n//           )}\n//       </div>\n//     );\n//   }\n// }\n\n// export default Stock;\n\n// import React, { Component } from \"react\";\n// import Plot from \"react-plotly.js\";\n// import Prediction from \"./Prediction\";\n\n// class Stock extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       stockChartXValues: [],\n//       stockChartYValues: [],\n//       prediction: null,\n//     };\n//   }\n\n//   componentDidMount() {\n//     this.fetchStock(this.props.sign);\n//   }\n\n//   componentDidUpdate(prevProps) {\n//     if (this.props.sign !== prevProps.sign) {\n//       this.fetchStock(this.props.sign);\n//     }\n//   }\n\n//   fetchStock(StockSymbol) {\n//     const API_KEY = \"HGJWFG4N8AQ66ICD\";\n\n//     let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${StockSymbol}&outputsize=compact&apikey=${API_KEY}`;\n\n//     let stockChartXValuesFunction = [];\n//     let stockChartYValuesFunction = [];\n\n//     fetch(API_Call)\n//       .then(function(response) {\n//         return response.json();\n//       })\n//       .then(\n//         function(data) {\n//           console.log(data);\n\n//           for (var key in data[\"Time Series (Daily)\"]) {\n//             stockChartXValuesFunction.push(key);\n//             stockChartYValuesFunction.push(\n//               data[\"Time Series (Daily)\"][key][\"1. open\"]\n//             );\n//           }\n\n//           const prediction = this.handlePrediction(stockChartYValuesFunction);\n\n//           this.setState({\n//             stockChartXValues: stockChartXValuesFunction,\n//             stockChartYValues: stockChartYValuesFunction,\n//             prediction: prediction,\n//           });\n//         }.bind(this)\n//       );\n//   }\n\n//   handlePrediction(stockData) {\n//     const len = stockData.length;\n//     const priceToday = parseFloat(stockData[len - 1]);\n//     const priceYesterday = parseFloat(stockData[len - 2]);\n\n//     if (priceToday > priceYesterday) {\n//       return \"up\";\n//     } else if (priceToday < priceYesterday) {\n//       return \"down\";\n//     } else {\n//       return \"unchanged\";\n//     }\n//   }\n\n//   render() {\n//     return (\n//       <div>\n//         <Plot\n//           data={[\n//             {\n//               x: this.state.stockChartXValues,\n//               y: this.state.stockChartYValues,\n//               type: \"scatter\",\n//               mode: \"lines+markers\",\n//               marker: { color: \"red\" },\n//             },\n//           ]}\n//           layout={{\n//             width: 720,\n//             height: 440,\n//             title: `${this.props.sign} Chart`,\n//           }}\n//         />\n//         {this.props.sign && this.state.prediction !== null && (\n//           <div>\n//             The prediction is that this stock goes{\" \"}\n//             <span style={{ whiteSpace: \"nowrap\" }}>\n//               <Prediction pred={this.state.prediction} />\n//             </span>{\" \"}\n//             in price.\n//           </div>\n//         )}\n//       </div>\n//     );\n//   }\n// }\n\n// export default Stock;\n\n// import React, { Component } from \"react\";\n// import Plot from \"react-plotly.js\";\n// import Prediction from \"./Prediction\";\n\n// class Stock extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       stockChartXValues: [],\n//       stockChartYValues: [],\n//       prediction: null, // set initial value of prediction to null\n//     };\n//   }\n\n//   componentDidMount() {\n//     this.fetchStock(this.props.sign);\n//   }\n\n//   componentDidUpdate(prevProps) {\n//     if (this.props.sign !== prevProps.sign) {\n//       this.fetchStock(this.props.sign);\n//     }\n//   }\n\n//   fetchStock(StockSymbol) {\n//     const API_KEY = \"HGJWFG4N8AQ66ICD\";\n\n//     let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${StockSymbol}&outputsize=compact&apikey=${API_KEY}`;\n\n//     let stockChartXValuesFunction = [];\n//     let stockChartYValuesFunction = [];\n\n//     fetch(API_Call)\n//       .then(function(response) {\n//         return response.json();\n//       })\n//       .then(\n//         function(data) {\n//           console.log(data);\n\n//           for (var key in data[\"Time Series (Daily)\"]) {\n//             stockChartXValuesFunction.push(key);\n//             stockChartYValuesFunction.push(\n//               data[\"Time Series (Daily)\"][key][\"1. open\"]\n//             );\n//           }\n\n//           this.setState({\n//             stockChartXValues: stockChartXValuesFunction,\n//             stockChartYValues: stockChartYValuesFunction,\n//           });\n\n//           this.getPrediction(data);\n//         }.bind(this)\n//       );\n//   }\n\n//   getPrediction(stockData) {\n//     // Perform some logic to calculate the prediction\n//     // and update the state with the new prediction value\n//     this.setState({ prediction: \"2\" });\n//   }\n\n//   render() {\n//     return (\n//       <div>\n//         <Plot\n//           data={[\n//             {\n//               x: this.state.stockChartXValues,\n//               y: this.state.stockChartYValues,\n//               type: \"scatter\",\n//               mode: \"lines+markers\",\n//               marker: { color: \"red\" },\n//             },\n//           ]}\n//           layout={{\n//             width: 720,\n//             height: 440,\n//             title: `${this.props.sign} Chart`,\n//           }}\n//         />\n//         {this.props.sign &&\n//         this.state.prediction !== null && ( // render prediction only when sign is truthy and prediction is not null\n//             <div>\n//               The prediction is that this stock goes{\" \"}\n//               <span style={{ whiteSpace: \"nowrap\" }}>\n//                 <Prediction pred={this.state.prediction} />\n//               </span>{\" \"}\n//               in price.\n//             </div>\n//           )}\n//       </div>\n//     );\n//   }\n// }\n\n// export default Stock;\n\n// import React, { Component } from \"react\";\n// import Plot from \"react-plotly.js\";\n// import Prediction from \"./Prediction\";\n\n// class Stock extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       stockChartXValues: [],\n//       stockChartYValues: [],\n//       prediction: null, // set initial value of prediction to null\n//     };\n//     this.handleSubmit = this.handleSubmit.bind(this);\n//   }\n\n//   componentDidMount() {\n//     this.fetchStock(this.props.sign);\n//   }\n\n//   componentDidUpdate(prevProps) {\n//     if (this.props.sign !== prevProps.sign) {\n//       this.fetchStock(this.props.sign);\n//     }\n//   }\n\n//   fetchStock(StockSymbol) {\n//     const API_KEY = \"HGJWFG4N8AQ66ICD\";\n\n//     let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${StockSymbol}&outputsize=compact&apikey=${API_KEY}`;\n\n//     let stockChartXValuesFunction = [];\n//     let stockChartYValuesFunction = [];\n\n//     fetch(API_Call)\n//       .then(function(response) {\n//         return response.json();\n//       })\n//       .then(\n//         function(data) {\n//           console.log(data);\n\n//           for (var key in data[\"Time Series (Daily)\"]) {\n//             stockChartXValuesFunction.push(key);\n//             stockChartYValuesFunction.push(\n//               data[\"Time Series (Daily)\"][key][\"1. open\"]\n//             );\n//           }\n\n//           this.setState({\n//             stockChartXValues: stockChartXValuesFunction,\n//             stockChartYValues: stockChartYValuesFunction,\n//           });\n\n//           this.getPrediction(data);\n//         }.bind(this)\n//       );\n//   }\n\n//   getPrediction(stockData) {\n//     // Perform some logic to calculate the prediction\n//     // and update the state with the new prediction value\n//     this.setState({ prediction: \"2\" });\n//   }\n\n//   handleSubmit(event) {\n//     event.preventDefault();\n//     this.fetchStock(event.target.stockInput.value);\n//   }\n\n//   render() {\n//     return (\n//       <div>\n//         <form onSubmit={this.handleSubmit}>\n//           <input type=\"text\" id=\"stockInput\" />\n//           <button type=\"submit\">Search</button>\n//         </form>\n//         <Plot\n//           data={[\n//             {\n//               x: this.state.stockChartXValues,\n//               y: this.state.stockChartYValues,\n//               type: \"scatter\",\n//               mode: \"lines+markers\",\n//               marker: { color: \"red\" },\n//             },\n//           ]}\n//           layout={{\n//             width: 720,\n//             height: 440,\n//             title: `${this.props.sign} Chart`,\n//           }}\n//         />\n//         {this.props.sign &&\n//         this.state.prediction !== null && ( // render prediction only when sign is truthy and prediction is not null\n//             <div>\n//               The prediction is that this stock goes{\" \"}\n//               <span style={{ whiteSpace: \"nowrap\" }}>\n//                 <Prediction pred={this.state.prediction} />\n//               </span>{\" \"}\n//               in price.\n//             </div>\n//           )}\n//       </div>\n//     );\n//   }\n// }\n\n// export default Stock;\n\nimport React, { Component } from \"react\";\nimport Plot from \"react-plotly.js\";\nimport Prediction from \"./Prediction\";\nimport SearchBar from \"./SearchBar\";\nvar Stock = /*#__PURE__*/function (_Component) {\n  _inherits(Stock, _Component);\n  function Stock(props) {\n    var _this;\n    _classCallCheck(this, Stock);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Stock).call(this, props));\n    _this.handleSubmit = function (event, data) {\n      event.preventDefault();\n      _this.fetchStock(data);\n    };\n    _this.state = {\n      stockChartXValues: [],\n      stockChartYValues: [],\n      prediction: null // set initial value of prediction to null\n    };\n    return _this;\n  }\n  _createClass(Stock, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchStock(this.props.sign);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.sign !== prevProps.sign) {\n        this.fetchStock(this.props.sign);\n      }\n    }\n  }, {\n    key: \"fetchStock\",\n    value: function fetchStock(StockSymbol) {\n      var API_KEY = \"HGJWFG4N8AQ66ICD\";\n      var API_Call = \"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=\".concat(StockSymbol, \"&outputsize=compact&apikey=\").concat(API_KEY);\n      var stockChartXValuesFunction = [];\n      var stockChartYValuesFunction = [];\n      fetch(API_Call).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        console.log(data);\n        for (var key in data[\"Time Series (Daily)\"]) {\n          stockChartXValuesFunction.push(key);\n          stockChartYValuesFunction.push(data[\"Time Series (Daily)\"][key][\"1. open\"]);\n        }\n        this.setState({\n          stockChartXValues: stockChartXValuesFunction,\n          stockChartYValues: stockChartYValuesFunction\n        });\n        this.getPrediction(data);\n      }.bind(this));\n    }\n  }, {\n    key: \"getPrediction\",\n    value: function getPrediction(stockData) {\n      // Perform some logic to calculate the prediction\n      // and update the state with the new prediction value\n      this.setState({\n        prediction: \"2\"\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 644,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(SearchBar, {\n        handleSubmit: this.handleSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 645,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(Plot, {\n        data: [{\n          x: this.state.stockChartXValues,\n          y: this.state.stockChartYValues,\n          type: \"scatter\",\n          mode: \"lines+markers\",\n          marker: {\n            color: \"red\"\n          }\n        }],\n        layout: {\n          width: 720,\n          height: 440,\n          title: \"\".concat(this.props.sign, \" Chart\")\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 646,\n          columnNumber: 9\n        }\n      }), this.props.sign && this.state.prediction !== null &&\n      /*#__PURE__*/\n      // render prediction only when sign is truthy and prediction is not null\n      React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 664,\n          columnNumber: 13\n        }\n      }, \"The prediction is that this stock goes\", \" \", /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          whiteSpace: \"nowrap\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 666,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Prediction, {\n        pred: this.state.prediction,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 667,\n          columnNumber: 17\n        }\n      })), \" \", \"in price.\"));\n    }\n  }]);\n  return Stock;\n}(Component);\nexport default Stock;","map":{"version":3,"names":["React","Component","Plot","Prediction","SearchBar","Stock","_Component","_inherits","props","_this","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","call","handleSubmit","event","data","preventDefault","fetchStock","state","stockChartXValues","stockChartYValues","prediction","_createClass","key","value","componentDidMount","sign","componentDidUpdate","prevProps","StockSymbol","API_KEY","API_Call","concat","stockChartXValuesFunction","stockChartYValuesFunction","fetch","then","response","json","console","log","push","setState","getPrediction","bind","stockData","render","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","x","y","type","mode","marker","color","layout","width","height","title","style","whiteSpace","pred"],"sources":["/home/joshua/Desktop/MainFolder/OuClasses/Spring 2023/Software Engineering/CoinFlipStockPredictor/StockChart/src/Stock.js"],"sourcesContent":["// import React, { useState } from \"react\";\n// import Plot from \"react-plotly.js\";\n\n// class Stock extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       stockChartXValues: [],\n//       stockChartYValues: [],\n//     };\n//     this.symb = props.sign;\n//   }\n\n//   componentDidMount() {\n//     this.fetchStock();\n//   }\n\n//   fetchStock() {\n//     const pointerToThis = this;\n//     console.log(pointerToThis);\n//     const API_KEY = \"HGJWFG4N8AQ66ICD\";\n\n//     let StockSymbol = pointerToThis.symb;\n//     let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${StockSymbol}&outputsize=compact&apikey=${API_KEY}`;\n\n//     let stockChartXValuesFunction = [];\n//     let stockChartYValuesFunction = [];\n\n//     fetch(API_Call)\n//       .then(function(response) {\n//         return response.json();\n//       })\n//       .then(function(data) {\n//         console.log(data);\n\n//         for (var key in data[\"Time Series (Daily)\"]) {\n//           stockChartXValuesFunction.push(key);\n//           stockChartYValuesFunction.push(\n//             data[\"Time Series (Daily)\"][key][\"1. open\"]\n//           );\n//         }\n\n//         // console.log(stockChartXValuesFunction);\n//         pointerToThis.setState({\n//           stockChartXValues: stockChartXValuesFunction,\n//           stockChartYValues: stockChartYValuesFunction,\n//         });\n//       });\n//   }\n\n//   render() {\n//     return (\n//       <div>\n//         <Plot\n//           data={[\n//             {\n//               x: this.state.stockChartXValues,\n//               y: this.state.stockChartYValues,\n//               type: \"scatter\",\n//               mode: \"lines+markers\",\n//               marker: { color: \"red\" },\n//             },\n//           ]}\n//           layout={{\n//             width: 720,\n//             height: 440,\n//             title: `${this.symb} Chart`,\n//           }}\n//         />\n//         <p>The prediction is that this stock goes up in price.</p>\n//       </div>\n//     );\n//   }\n// }\n\n// export default Stock;\n\n// CHAT GPT DID THIS\n// import React, { Component } from \"react\";\n// import Plot from \"react-plotly.js\";\n// import Prediction from \"./Prediction\";\n\n// class Stock extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       stockChartXValues: [],\n//       stockChartYValues: [],\n//     };\n//   }\n\n//   componentDidMount() {\n//     this.fetchStock(this.props.sign);\n//   }\n\n//   componentDidUpdate(prevProps) {\n//     if (this.props.sign !== prevProps.sign) {\n//       this.fetchStock(this.props.sign);\n//     }\n//   }\n\n//   fetchStock(StockSymbol) {\n//     const API_KEY = \"HGJWFG4N8AQ66ICD\";\n\n//     let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${StockSymbol}&outputsize=compact&apikey=${API_KEY}`;\n\n//     let stockChartXValuesFunction = [];\n//     let stockChartYValuesFunction = [];\n\n//     fetch(API_Call)\n//       .then(function(response) {\n//         return response.json();\n//       })\n//       .then(\n//         function(data) {\n//           console.log(data);\n\n//           for (var key in data[\"Time Series (Daily)\"]) {\n//             stockChartXValuesFunction.push(key);\n//             stockChartYValuesFunction.push(\n//               data[\"Time Series (Daily)\"][key][\"1. open\"]\n//             );\n//           }\n\n//           this.setState({\n//             stockChartXValues: stockChartXValuesFunction,\n//             stockChartYValues: stockChartYValuesFunction,\n//           });\n//         }.bind(this)\n//       );\n//   }\n\n//   render() {\n//     return (\n//       <div>\n//         <Plot\n//           data={[\n//             {\n//               x: this.state.stockChartXValues,\n//               y: this.state.stockChartYValues,\n//               type: \"scatter\",\n//               mode: \"lines+markers\",\n//               marker: { color: \"red\" },\n//             },\n//           ]}\n//           layout={{\n//             width: 720,\n//             height: 440,\n//             title: `${this.props.sign} Chart`,\n//           }}\n//         />\n//         <div>\n//           The prediction is that this stock goes{\" \"}\n//           <span style={{ whiteSpace: \"nowrap\" }}>\n//             <Prediction pred=\"2\" />\n//           </span>{\" \"}\n//           in price.\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default Stock;\n\n// import React, { Component } from \"react\";\n// import Plot from \"react-plotly.js\";\n// import Prediction from \"./Prediction\";\n\n// class Stock extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       stockChartXValues: [],\n//       stockChartYValues: [],\n//       prediction: null, // set initial value of prediction to null\n//     };\n//   }\n\n//   componentDidMount() {\n//     this.fetchStock(this.props.sign);\n//   }\n\n//   componentDidUpdate(prevProps) {\n//     if (this.props.sign !== prevProps.sign) {\n//       this.fetchStock(this.props.sign);\n//     }\n//   }\n\n//   fetchStock(StockSymbol) {\n//     const API_KEY = \"HGJWFG4N8AQ66ICD\";\n\n//     let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${StockSymbol}&outputsize=compact&apikey=${API_KEY}`;\n\n//     let stockChartXValuesFunction = [];\n//     let stockChartYValuesFunction = [];\n\n//     fetch(API_Call)\n//       .then(function(response) {\n//         return response.json();\n//       })\n//       .then(\n//         function(data) {\n//           console.log(data);\n\n//           for (var key in data[\"Time Series (Daily)\"]) {\n//             stockChartXValuesFunction.push(key);\n//             stockChartYValuesFunction.push(\n//               data[\"Time Series (Daily)\"][key][\"1. open\"]\n//             );\n//           }\n\n//           this.setState({\n//             stockChartXValues: stockChartXValuesFunction,\n//             stockChartYValues: stockChartYValuesFunction,\n//             prediction: \"2\", // update prediction when new stock data is fetched\n//           });\n//         }.bind(this)\n//       );\n//   }\n\n//   render() {\n//     return (\n//       <div>\n//         <Plot\n//           data={[\n//             {\n//               x: this.state.stockChartXValues,\n//               y: this.state.stockChartYValues,\n//               type: \"scatter\",\n//               mode: \"lines+markers\",\n//               marker: { color: \"red\" },\n//             },\n//           ]}\n//           layout={{\n//             width: 720,\n//             height: 440,\n//             title: `${this.props.sign} Chart`,\n//           }}\n//         />\n//         {this.props.sign &&\n//         this.state.prediction !== null && ( // render prediction only when sign is truthy and prediction is not null\n//             <div>\n//               The prediction is that this stock goes{\" \"}\n//               <span style={{ whiteSpace: \"nowrap\" }}>\n//                 <Prediction pred={this.state.prediction} />\n//               </span>{\" \"}\n//               in price.\n//             </div>\n//           )}\n//       </div>\n//     );\n//   }\n// }\n\n// export default Stock;\n\n// import React, { Component } from \"react\";\n// import Plot from \"react-plotly.js\";\n// import Prediction from \"./Prediction\";\n\n// class Stock extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       stockChartXValues: [],\n//       stockChartYValues: [],\n//       prediction: null,\n//     };\n//   }\n\n//   componentDidMount() {\n//     this.fetchStock(this.props.sign);\n//   }\n\n//   componentDidUpdate(prevProps) {\n//     if (this.props.sign !== prevProps.sign) {\n//       this.fetchStock(this.props.sign);\n//     }\n//   }\n\n//   fetchStock(StockSymbol) {\n//     const API_KEY = \"HGJWFG4N8AQ66ICD\";\n\n//     let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${StockSymbol}&outputsize=compact&apikey=${API_KEY}`;\n\n//     let stockChartXValuesFunction = [];\n//     let stockChartYValuesFunction = [];\n\n//     fetch(API_Call)\n//       .then(function(response) {\n//         return response.json();\n//       })\n//       .then(\n//         function(data) {\n//           console.log(data);\n\n//           for (var key in data[\"Time Series (Daily)\"]) {\n//             stockChartXValuesFunction.push(key);\n//             stockChartYValuesFunction.push(\n//               data[\"Time Series (Daily)\"][key][\"1. open\"]\n//             );\n//           }\n\n//           const prediction = this.handlePrediction(stockChartYValuesFunction);\n\n//           this.setState({\n//             stockChartXValues: stockChartXValuesFunction,\n//             stockChartYValues: stockChartYValuesFunction,\n//             prediction: prediction,\n//           });\n//         }.bind(this)\n//       );\n//   }\n\n//   handlePrediction(stockData) {\n//     const len = stockData.length;\n//     const priceToday = parseFloat(stockData[len - 1]);\n//     const priceYesterday = parseFloat(stockData[len - 2]);\n\n//     if (priceToday > priceYesterday) {\n//       return \"up\";\n//     } else if (priceToday < priceYesterday) {\n//       return \"down\";\n//     } else {\n//       return \"unchanged\";\n//     }\n//   }\n\n//   render() {\n//     return (\n//       <div>\n//         <Plot\n//           data={[\n//             {\n//               x: this.state.stockChartXValues,\n//               y: this.state.stockChartYValues,\n//               type: \"scatter\",\n//               mode: \"lines+markers\",\n//               marker: { color: \"red\" },\n//             },\n//           ]}\n//           layout={{\n//             width: 720,\n//             height: 440,\n//             title: `${this.props.sign} Chart`,\n//           }}\n//         />\n//         {this.props.sign && this.state.prediction !== null && (\n//           <div>\n//             The prediction is that this stock goes{\" \"}\n//             <span style={{ whiteSpace: \"nowrap\" }}>\n//               <Prediction pred={this.state.prediction} />\n//             </span>{\" \"}\n//             in price.\n//           </div>\n//         )}\n//       </div>\n//     );\n//   }\n// }\n\n// export default Stock;\n\n// import React, { Component } from \"react\";\n// import Plot from \"react-plotly.js\";\n// import Prediction from \"./Prediction\";\n\n// class Stock extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       stockChartXValues: [],\n//       stockChartYValues: [],\n//       prediction: null, // set initial value of prediction to null\n//     };\n//   }\n\n//   componentDidMount() {\n//     this.fetchStock(this.props.sign);\n//   }\n\n//   componentDidUpdate(prevProps) {\n//     if (this.props.sign !== prevProps.sign) {\n//       this.fetchStock(this.props.sign);\n//     }\n//   }\n\n//   fetchStock(StockSymbol) {\n//     const API_KEY = \"HGJWFG4N8AQ66ICD\";\n\n//     let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${StockSymbol}&outputsize=compact&apikey=${API_KEY}`;\n\n//     let stockChartXValuesFunction = [];\n//     let stockChartYValuesFunction = [];\n\n//     fetch(API_Call)\n//       .then(function(response) {\n//         return response.json();\n//       })\n//       .then(\n//         function(data) {\n//           console.log(data);\n\n//           for (var key in data[\"Time Series (Daily)\"]) {\n//             stockChartXValuesFunction.push(key);\n//             stockChartYValuesFunction.push(\n//               data[\"Time Series (Daily)\"][key][\"1. open\"]\n//             );\n//           }\n\n//           this.setState({\n//             stockChartXValues: stockChartXValuesFunction,\n//             stockChartYValues: stockChartYValuesFunction,\n//           });\n\n//           this.getPrediction(data);\n//         }.bind(this)\n//       );\n//   }\n\n//   getPrediction(stockData) {\n//     // Perform some logic to calculate the prediction\n//     // and update the state with the new prediction value\n//     this.setState({ prediction: \"2\" });\n//   }\n\n//   render() {\n//     return (\n//       <div>\n//         <Plot\n//           data={[\n//             {\n//               x: this.state.stockChartXValues,\n//               y: this.state.stockChartYValues,\n//               type: \"scatter\",\n//               mode: \"lines+markers\",\n//               marker: { color: \"red\" },\n//             },\n//           ]}\n//           layout={{\n//             width: 720,\n//             height: 440,\n//             title: `${this.props.sign} Chart`,\n//           }}\n//         />\n//         {this.props.sign &&\n//         this.state.prediction !== null && ( // render prediction only when sign is truthy and prediction is not null\n//             <div>\n//               The prediction is that this stock goes{\" \"}\n//               <span style={{ whiteSpace: \"nowrap\" }}>\n//                 <Prediction pred={this.state.prediction} />\n//               </span>{\" \"}\n//               in price.\n//             </div>\n//           )}\n//       </div>\n//     );\n//   }\n// }\n\n// export default Stock;\n\n// import React, { Component } from \"react\";\n// import Plot from \"react-plotly.js\";\n// import Prediction from \"./Prediction\";\n\n// class Stock extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       stockChartXValues: [],\n//       stockChartYValues: [],\n//       prediction: null, // set initial value of prediction to null\n//     };\n//     this.handleSubmit = this.handleSubmit.bind(this);\n//   }\n\n//   componentDidMount() {\n//     this.fetchStock(this.props.sign);\n//   }\n\n//   componentDidUpdate(prevProps) {\n//     if (this.props.sign !== prevProps.sign) {\n//       this.fetchStock(this.props.sign);\n//     }\n//   }\n\n//   fetchStock(StockSymbol) {\n//     const API_KEY = \"HGJWFG4N8AQ66ICD\";\n\n//     let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${StockSymbol}&outputsize=compact&apikey=${API_KEY}`;\n\n//     let stockChartXValuesFunction = [];\n//     let stockChartYValuesFunction = [];\n\n//     fetch(API_Call)\n//       .then(function(response) {\n//         return response.json();\n//       })\n//       .then(\n//         function(data) {\n//           console.log(data);\n\n//           for (var key in data[\"Time Series (Daily)\"]) {\n//             stockChartXValuesFunction.push(key);\n//             stockChartYValuesFunction.push(\n//               data[\"Time Series (Daily)\"][key][\"1. open\"]\n//             );\n//           }\n\n//           this.setState({\n//             stockChartXValues: stockChartXValuesFunction,\n//             stockChartYValues: stockChartYValuesFunction,\n//           });\n\n//           this.getPrediction(data);\n//         }.bind(this)\n//       );\n//   }\n\n//   getPrediction(stockData) {\n//     // Perform some logic to calculate the prediction\n//     // and update the state with the new prediction value\n//     this.setState({ prediction: \"2\" });\n//   }\n\n//   handleSubmit(event) {\n//     event.preventDefault();\n//     this.fetchStock(event.target.stockInput.value);\n//   }\n\n//   render() {\n//     return (\n//       <div>\n//         <form onSubmit={this.handleSubmit}>\n//           <input type=\"text\" id=\"stockInput\" />\n//           <button type=\"submit\">Search</button>\n//         </form>\n//         <Plot\n//           data={[\n//             {\n//               x: this.state.stockChartXValues,\n//               y: this.state.stockChartYValues,\n//               type: \"scatter\",\n//               mode: \"lines+markers\",\n//               marker: { color: \"red\" },\n//             },\n//           ]}\n//           layout={{\n//             width: 720,\n//             height: 440,\n//             title: `${this.props.sign} Chart`,\n//           }}\n//         />\n//         {this.props.sign &&\n//         this.state.prediction !== null && ( // render prediction only when sign is truthy and prediction is not null\n//             <div>\n//               The prediction is that this stock goes{\" \"}\n//               <span style={{ whiteSpace: \"nowrap\" }}>\n//                 <Prediction pred={this.state.prediction} />\n//               </span>{\" \"}\n//               in price.\n//             </div>\n//           )}\n//       </div>\n//     );\n//   }\n// }\n\n// export default Stock;\n\nimport React, { Component } from \"react\";\nimport Plot from \"react-plotly.js\";\nimport Prediction from \"./Prediction\";\nimport SearchBar from \"./SearchBar\";\n\nclass Stock extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      stockChartXValues: [],\n      stockChartYValues: [],\n      prediction: null, // set initial value of prediction to null\n    };\n  }\n\n  componentDidMount() {\n    this.fetchStock(this.props.sign);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.sign !== prevProps.sign) {\n      this.fetchStock(this.props.sign);\n    }\n  }\n\n  fetchStock(StockSymbol) {\n    const API_KEY = \"HGJWFG4N8AQ66ICD\";\n\n    let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${StockSymbol}&outputsize=compact&apikey=${API_KEY}`;\n\n    let stockChartXValuesFunction = [];\n    let stockChartYValuesFunction = [];\n\n    fetch(API_Call)\n      .then(function(response) {\n        return response.json();\n      })\n      .then(\n        function(data) {\n          console.log(data);\n\n          for (var key in data[\"Time Series (Daily)\"]) {\n            stockChartXValuesFunction.push(key);\n            stockChartYValuesFunction.push(\n              data[\"Time Series (Daily)\"][key][\"1. open\"]\n            );\n          }\n\n          this.setState({\n            stockChartXValues: stockChartXValuesFunction,\n            stockChartYValues: stockChartYValuesFunction,\n          });\n\n          this.getPrediction(data);\n        }.bind(this)\n      );\n  }\n\n  getPrediction(stockData) {\n    // Perform some logic to calculate the prediction\n    // and update the state with the new prediction value\n    this.setState({ prediction: \"2\" });\n  }\n\n  handleSubmit = (event, data) => {\n    event.preventDefault();\n    this.fetchStock(data);\n  };\n\n  render() {\n    return (\n      <div>\n        <SearchBar handleSubmit={this.handleSubmit} />\n        <Plot\n          data={[\n            {\n              x: this.state.stockChartXValues,\n              y: this.state.stockChartYValues,\n              type: \"scatter\",\n              mode: \"lines+markers\",\n              marker: { color: \"red\" },\n            },\n          ]}\n          layout={{\n            width: 720,\n            height: 440,\n            title: `${this.props.sign} Chart`,\n          }}\n        />\n        {this.props.sign &&\n        this.state.prediction !== null && ( // render prediction only when sign is truthy and prediction is not null\n            <div>\n              The prediction is that this stock goes{\" \"}\n              <span style={{ whiteSpace: \"nowrap\" }}>\n                <Prediction pred={this.state.prediction} />\n              </span>{\" \"}\n              in price.\n            </div>\n          )}\n      </div>\n    );\n  }\n}\n\nexport default Stock;\n"],"mappings":";;;;;;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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"},"metadata":{},"sourceType":"module"}