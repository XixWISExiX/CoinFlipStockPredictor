{"ast":null,"code":"// import React, { useState } from \"react\";\n// import Plot from \"react-plotly.js\";\n\n// class Stock extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       stockChartXValues: [],\n//       stockChartYValues: [],\n//     };\n//     this.symb = props.sign;\n//   }\n\n//   componentDidMount() {\n//     this.fetchStock();\n//   }\n\n//   fetchStock() {\n//     const pointerToThis = this;\n//     console.log(pointerToThis);\n//     const API_KEY = \"HGJWFG4N8AQ66ICD\";\n\n//     let StockSymbol = pointerToThis.symb;\n//     let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${StockSymbol}&outputsize=compact&apikey=${API_KEY}`;\n\n//     let stockChartXValuesFunction = [];\n//     let stockChartYValuesFunction = [];\n\n//     fetch(API_Call)\n//       .then(function(response) {\n//         return response.json();\n//       })\n//       .then(function(data) {\n//         console.log(data);\n\n//         for (var key in data[\"Time Series (Daily)\"]) {\n//           stockChartXValuesFunction.push(key);\n//           stockChartYValuesFunction.push(\n//             data[\"Time Series (Daily)\"][key][\"1. open\"]\n//           );\n//         }\n\n//         // console.log(stockChartXValuesFunction);\n//         pointerToThis.setState({\n//           stockChartXValues: stockChartXValuesFunction,\n//           stockChartYValues: stockChartYValuesFunction,\n//         });\n//       });\n//   }\n\n//   render() {\n//     return (\n//       <div>\n//         <Plot\n//           data={[\n//             {\n//               x: this.state.stockChartXValues,\n//               y: this.state.stockChartYValues,\n//               type: \"scatter\",\n//               mode: \"lines+markers\",\n//               marker: { color: \"red\" },\n//             },\n//           ]}\n//           layout={{\n//             width: 720,\n//             height: 440,\n//             title: `${this.symb} Chart`,\n//           }}\n//         />\n//         <p>The prediction is that this stock goes up in price.</p>\n//       </div>\n//     );\n//   }\n// }\n\n// export default Stock;\n\n// CHAT GPT DID THIS\n// import React, { Component } from \"react\";\n// import Plot from \"react-plotly.js\";\n// import Prediction from \"./Prediction\";\n\n// class Stock extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       stockChartXValues: [],\n//       stockChartYValues: [],\n//     };\n//   }\n\n//   componentDidMount() {\n//     this.fetchStock(this.props.sign);\n//   }\n\n//   componentDidUpdate(prevProps) {\n//     if (this.props.sign !== prevProps.sign) {\n//       this.fetchStock(this.props.sign);\n//     }\n//   }\n\n//   fetchStock(StockSymbol) {\n//     const API_KEY = \"HGJWFG4N8AQ66ICD\";\n\n//     let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${StockSymbol}&outputsize=compact&apikey=${API_KEY}`;\n\n//     let stockChartXValuesFunction = [];\n//     let stockChartYValuesFunction = [];\n\n//     fetch(API_Call)\n//       .then(function(response) {\n//         return response.json();\n//       })\n//       .then(\n//         function(data) {\n//           console.log(data);\n\n//           for (var key in data[\"Time Series (Daily)\"]) {\n//             stockChartXValuesFunction.push(key);\n//             stockChartYValuesFunction.push(\n//               data[\"Time Series (Daily)\"][key][\"1. open\"]\n//             );\n//           }\n\n//           this.setState({\n//             stockChartXValues: stockChartXValuesFunction,\n//             stockChartYValues: stockChartYValuesFunction,\n//           });\n//         }.bind(this)\n//       );\n//   }\n\n//   render() {\n//     return (\n//       <div>\n//         <Plot\n//           data={[\n//             {\n//               x: this.state.stockChartXValues,\n//               y: this.state.stockChartYValues,\n//               type: \"scatter\",\n//               mode: \"lines+markers\",\n//               marker: { color: \"red\" },\n//             },\n//           ]}\n//           layout={{\n//             width: 720,\n//             height: 440,\n//             title: `${this.props.sign} Chart`,\n//           }}\n//         />\n//         <div>\n//           The prediction is that this stock goes{\" \"}\n//           <span style={{ whiteSpace: \"nowrap\" }}>\n//             <Prediction pred=\"2\" />\n//           </span>{\" \"}\n//           in price.\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default Stock;\n\n// import React, { Component } from \"react\";\n// import Plot from \"react-plotly.js\";\n// import Prediction from \"./Prediction\";\n\n// class Stock extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       stockChartXValues: [],\n//       stockChartYValues: [],\n//       prediction: null, // set initial value of prediction to null\n//     };\n//   }\n\n//   componentDidMount() {\n//     this.fetchStock(this.props.sign);\n//   }\n\n//   componentDidUpdate(prevProps) {\n//     if (this.props.sign !== prevProps.sign) {\n//       this.fetchStock(this.props.sign);\n//     }\n//   }\n\n//   fetchStock(StockSymbol) {\n//     const API_KEY = \"HGJWFG4N8AQ66ICD\";\n\n//     let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${StockSymbol}&outputsize=compact&apikey=${API_KEY}`;\n\n//     let stockChartXValuesFunction = [];\n//     let stockChartYValuesFunction = [];\n\n//     fetch(API_Call)\n//       .then(function(response) {\n//         return response.json();\n//       })\n//       .then(\n//         function(data) {\n//           console.log(data);\n\n//           for (var key in data[\"Time Series (Daily)\"]) {\n//             stockChartXValuesFunction.push(key);\n//             stockChartYValuesFunction.push(\n//               data[\"Time Series (Daily)\"][key][\"1. open\"]\n//             );\n//           }\n\n//           this.setState({\n//             stockChartXValues: stockChartXValuesFunction,\n//             stockChartYValues: stockChartYValuesFunction,\n//             prediction: \"2\", // update prediction when new stock data is fetched\n//           });\n//         }.bind(this)\n//       );\n//   }\n\n//   render() {\n//     return (\n//       <div>\n//         <Plot\n//           data={[\n//             {\n//               x: this.state.stockChartXValues,\n//               y: this.state.stockChartYValues,\n//               type: \"scatter\",\n//               mode: \"lines+markers\",\n//               marker: { color: \"red\" },\n//             },\n//           ]}\n//           layout={{\n//             width: 720,\n//             height: 440,\n//             title: `${this.props.sign} Chart`,\n//           }}\n//         />\n//         {this.props.sign &&\n//         this.state.prediction !== null && ( // render prediction only when sign is truthy and prediction is not null\n//             <div>\n//               The prediction is that this stock goes{\" \"}\n//               <span style={{ whiteSpace: \"nowrap\" }}>\n//                 <Prediction pred={this.state.prediction} />\n//               </span>{\" \"}\n//               in price.\n//             </div>\n//           )}\n//       </div>\n//     );\n//   }\n// }\n\n// export default Stock;\n\n// import React, { Component } from \"react\";\n// import Plot from \"react-plotly.js\";\n// import Prediction from \"./Prediction\";\n\n// class Stock extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       stockChartXValues: [],\n//       stockChartYValues: [],\n//       prediction: null,\n//     };\n//   }\n\n//   componentDidMount() {\n//     this.fetchStock(this.props.sign);\n//   }\n\n//   componentDidUpdate(prevProps) {\n//     if (this.props.sign !== prevProps.sign) {\n//       this.fetchStock(this.props.sign);\n//     }\n//   }\n\n//   fetchStock(StockSymbol) {\n//     const API_KEY = \"HGJWFG4N8AQ66ICD\";\n\n//     let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${StockSymbol}&outputsize=compact&apikey=${API_KEY}`;\n\n//     let stockChartXValuesFunction = [];\n//     let stockChartYValuesFunction = [];\n\n//     fetch(API_Call)\n//       .then(function(response) {\n//         return response.json();\n//       })\n//       .then(\n//         function(data) {\n//           console.log(data);\n\n//           for (var key in data[\"Time Series (Daily)\"]) {\n//             stockChartXValuesFunction.push(key);\n//             stockChartYValuesFunction.push(\n//               data[\"Time Series (Daily)\"][key][\"1. open\"]\n//             );\n//           }\n\n//           const prediction = this.handlePrediction(stockChartYValuesFunction);\n\n//           this.setState({\n//             stockChartXValues: stockChartXValuesFunction,\n//             stockChartYValues: stockChartYValuesFunction,\n//             prediction: prediction,\n//           });\n//         }.bind(this)\n//       );\n//   }\n\n//   handlePrediction(stockData) {\n//     const len = stockData.length;\n//     const priceToday = parseFloat(stockData[len - 1]);\n//     const priceYesterday = parseFloat(stockData[len - 2]);\n\n//     if (priceToday > priceYesterday) {\n//       return \"up\";\n//     } else if (priceToday < priceYesterday) {\n//       return \"down\";\n//     } else {\n//       return \"unchanged\";\n//     }\n//   }\n\n//   render() {\n//     return (\n//       <div>\n//         <Plot\n//           data={[\n//             {\n//               x: this.state.stockChartXValues,\n//               y: this.state.stockChartYValues,\n//               type: \"scatter\",\n//               mode: \"lines+markers\",\n//               marker: { color: \"red\" },\n//             },\n//           ]}\n//           layout={{\n//             width: 720,\n//             height: 440,\n//             title: `${this.props.sign} Chart`,\n//           }}\n//         />\n//         {this.props.sign && this.state.prediction !== null && (\n//           <div>\n//             The prediction is that this stock goes{\" \"}\n//             <span style={{ whiteSpace: \"nowrap\" }}>\n//               <Prediction pred={this.state.prediction} />\n//             </span>{\" \"}\n//             in price.\n//           </div>\n//         )}\n//       </div>\n//     );\n//   }\n// }\n\n// export default Stock;\n\n// import React, { Component } from \"react\";\n// import Plot from \"react-plotly.js\";\n// import Prediction from \"./Prediction\";\n\n// class Stock extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       stockChartXValues: [],\n//       stockChartYValues: [],\n//       prediction: null, // set initial value of prediction to null\n//     };\n//   }\n\n//   componentDidMount() {\n//     this.fetchStock(this.props.sign);\n//   }\n\n//   componentDidUpdate(prevProps) {\n//     if (this.props.sign !== prevProps.sign) {\n//       this.fetchStock(this.props.sign);\n//     }\n//   }\n\n//   fetchStock(StockSymbol) {\n//     const API_KEY = \"HGJWFG4N8AQ66ICD\";\n\n//     let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${StockSymbol}&outputsize=compact&apikey=${API_KEY}`;\n\n//     let stockChartXValuesFunction = [];\n//     let stockChartYValuesFunction = [];\n\n//     fetch(API_Call)\n//       .then(function(response) {\n//         return response.json();\n//       })\n//       .then(\n//         function(data) {\n//           console.log(data);\n\n//           for (var key in data[\"Time Series (Daily)\"]) {\n//             stockChartXValuesFunction.push(key);\n//             stockChartYValuesFunction.push(\n//               data[\"Time Series (Daily)\"][key][\"1. open\"]\n//             );\n//           }\n\n//           this.setState({\n//             stockChartXValues: stockChartXValuesFunction,\n//             stockChartYValues: stockChartYValuesFunction,\n//           });\n\n//           this.getPrediction(data);\n//         }.bind(this)\n//       );\n//   }\n\n//   getPrediction(stockData) {\n//     // Perform some logic to calculate the prediction\n//     // and update the state with the new prediction value\n//     this.setState({ prediction: \"2\" });\n//   }\n\n//   render() {\n//     return (\n//       <div>\n//         <Plot\n//           data={[\n//             {\n//               x: this.state.stockChartXValues,\n//               y: this.state.stockChartYValues,\n//               type: \"scatter\",\n//               mode: \"lines+markers\",\n//               marker: { color: \"red\" },\n//             },\n//           ]}\n//           layout={{\n//             width: 720,\n//             height: 440,\n//             title: `${this.props.sign} Chart`,\n//           }}\n//         />\n//         {this.props.sign &&\n//         this.state.prediction !== null && ( // render prediction only when sign is truthy and prediction is not null\n//             <div>\n//               The prediction is that this stock goes{\" \"}\n//               <span style={{ whiteSpace: \"nowrap\" }}>\n//                 <Prediction pred={this.state.prediction} />\n//               </span>{\" \"}\n//               in price.\n//             </div>\n//           )}\n//       </div>\n//     );\n//   }\n// }\n\n// export default Stock;\n\n// import React, { Component } from \"react\";\n// import Plot from \"react-plotly.js\";\n// import Prediction from \"./Prediction\";\n\n// class Stock extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       stockChartXValues: [],\n//       stockChartYValues: [],\n//       prediction: null, // set initial value of prediction to null\n//     };\n//     this.handleSubmit = this.handleSubmit.bind(this);\n//   }\n\n//   componentDidMount() {\n//     this.fetchStock(this.props.sign);\n//   }\n\n//   componentDidUpdate(prevProps) {\n//     if (this.props.sign !== prevProps.sign) {\n//       this.fetchStock(this.props.sign);\n//     }\n//   }\n\n//   fetchStock(StockSymbol) {\n//     const API_KEY = \"HGJWFG4N8AQ66ICD\";\n\n//     let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${StockSymbol}&outputsize=compact&apikey=${API_KEY}`;\n\n//     let stockChartXValuesFunction = [];\n//     let stockChartYValuesFunction = [];\n\n//     fetch(API_Call)\n//       .then(function(response) {\n//         return response.json();\n//       })\n//       .then(\n//         function(data) {\n//           console.log(data);\n\n//           for (var key in data[\"Time Series (Daily)\"]) {\n//             stockChartXValuesFunction.push(key);\n//             stockChartYValuesFunction.push(\n//               data[\"Time Series (Daily)\"][key][\"1. open\"]\n//             );\n//           }\n\n//           this.setState({\n//             stockChartXValues: stockChartXValuesFunction,\n//             stockChartYValues: stockChartYValuesFunction,\n//           });\n\n//           this.getPrediction(data);\n//         }.bind(this)\n//       );\n//   }\n\n//   getPrediction(stockData) {\n//     // Perform some logic to calculate the prediction\n//     // and update the state with the new prediction value\n//     this.setState({ prediction: \"2\" });\n//   }\n\n//   handleSubmit(event) {\n//     event.preventDefault();\n//     this.fetchStock(event.target.stockInput.value);\n//   }\n\n//   render() {\n//     return (\n//       <div>\n//         <form onSubmit={this.handleSubmit}>\n//           <input type=\"text\" id=\"stockInput\" />\n//           <button type=\"submit\">Search</button>\n//         </form>\n//         <Plot\n//           data={[\n//             {\n//               x: this.state.stockChartXValues,\n//               y: this.state.stockChartYValues,\n//               type: \"scatter\",\n//               mode: \"lines+markers\",\n//               marker: { color: \"red\" },\n//             },\n//           ]}\n//           layout={{\n//             width: 720,\n//             height: 440,\n//             title: `${this.props.sign} Chart`,\n//           }}\n//         />\n//         {this.props.sign &&\n//         this.state.prediction !== null && ( // render prediction only when sign is truthy and prediction is not null\n//             <div>\n//               The prediction is that this stock goes{\" \"}\n//               <span style={{ whiteSpace: \"nowrap\" }}>\n//                 <Prediction pred={this.state.prediction} />\n//               </span>{\" \"}\n//               in price.\n//             </div>\n//           )}\n//       </div>\n//     );\n//   }\n// }\n\n// export default Stock;","map":{"version":3,"names":[],"sources":["/home/joshua/Desktop/MainFolder/OuClasses/Spring 2023/Software Engineering/CoinFlipStockPredictor/StockChart/src/Stock.js"],"sourcesContent":["// import React, { useState } from \"react\";\n// import Plot from \"react-plotly.js\";\n\n// class Stock extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       stockChartXValues: [],\n//       stockChartYValues: [],\n//     };\n//     this.symb = props.sign;\n//   }\n\n//   componentDidMount() {\n//     this.fetchStock();\n//   }\n\n//   fetchStock() {\n//     const pointerToThis = this;\n//     console.log(pointerToThis);\n//     const API_KEY = \"HGJWFG4N8AQ66ICD\";\n\n//     let StockSymbol = pointerToThis.symb;\n//     let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${StockSymbol}&outputsize=compact&apikey=${API_KEY}`;\n\n//     let stockChartXValuesFunction = [];\n//     let stockChartYValuesFunction = [];\n\n//     fetch(API_Call)\n//       .then(function(response) {\n//         return response.json();\n//       })\n//       .then(function(data) {\n//         console.log(data);\n\n//         for (var key in data[\"Time Series (Daily)\"]) {\n//           stockChartXValuesFunction.push(key);\n//           stockChartYValuesFunction.push(\n//             data[\"Time Series (Daily)\"][key][\"1. open\"]\n//           );\n//         }\n\n//         // console.log(stockChartXValuesFunction);\n//         pointerToThis.setState({\n//           stockChartXValues: stockChartXValuesFunction,\n//           stockChartYValues: stockChartYValuesFunction,\n//         });\n//       });\n//   }\n\n//   render() {\n//     return (\n//       <div>\n//         <Plot\n//           data={[\n//             {\n//               x: this.state.stockChartXValues,\n//               y: this.state.stockChartYValues,\n//               type: \"scatter\",\n//               mode: \"lines+markers\",\n//               marker: { color: \"red\" },\n//             },\n//           ]}\n//           layout={{\n//             width: 720,\n//             height: 440,\n//             title: `${this.symb} Chart`,\n//           }}\n//         />\n//         <p>The prediction is that this stock goes up in price.</p>\n//       </div>\n//     );\n//   }\n// }\n\n// export default Stock;\n\n// CHAT GPT DID THIS\n// import React, { Component } from \"react\";\n// import Plot from \"react-plotly.js\";\n// import Prediction from \"./Prediction\";\n\n// class Stock extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       stockChartXValues: [],\n//       stockChartYValues: [],\n//     };\n//   }\n\n//   componentDidMount() {\n//     this.fetchStock(this.props.sign);\n//   }\n\n//   componentDidUpdate(prevProps) {\n//     if (this.props.sign !== prevProps.sign) {\n//       this.fetchStock(this.props.sign);\n//     }\n//   }\n\n//   fetchStock(StockSymbol) {\n//     const API_KEY = \"HGJWFG4N8AQ66ICD\";\n\n//     let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${StockSymbol}&outputsize=compact&apikey=${API_KEY}`;\n\n//     let stockChartXValuesFunction = [];\n//     let stockChartYValuesFunction = [];\n\n//     fetch(API_Call)\n//       .then(function(response) {\n//         return response.json();\n//       })\n//       .then(\n//         function(data) {\n//           console.log(data);\n\n//           for (var key in data[\"Time Series (Daily)\"]) {\n//             stockChartXValuesFunction.push(key);\n//             stockChartYValuesFunction.push(\n//               data[\"Time Series (Daily)\"][key][\"1. open\"]\n//             );\n//           }\n\n//           this.setState({\n//             stockChartXValues: stockChartXValuesFunction,\n//             stockChartYValues: stockChartYValuesFunction,\n//           });\n//         }.bind(this)\n//       );\n//   }\n\n//   render() {\n//     return (\n//       <div>\n//         <Plot\n//           data={[\n//             {\n//               x: this.state.stockChartXValues,\n//               y: this.state.stockChartYValues,\n//               type: \"scatter\",\n//               mode: \"lines+markers\",\n//               marker: { color: \"red\" },\n//             },\n//           ]}\n//           layout={{\n//             width: 720,\n//             height: 440,\n//             title: `${this.props.sign} Chart`,\n//           }}\n//         />\n//         <div>\n//           The prediction is that this stock goes{\" \"}\n//           <span style={{ whiteSpace: \"nowrap\" }}>\n//             <Prediction pred=\"2\" />\n//           </span>{\" \"}\n//           in price.\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default Stock;\n\n// import React, { Component } from \"react\";\n// import Plot from \"react-plotly.js\";\n// import Prediction from \"./Prediction\";\n\n// class Stock extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       stockChartXValues: [],\n//       stockChartYValues: [],\n//       prediction: null, // set initial value of prediction to null\n//     };\n//   }\n\n//   componentDidMount() {\n//     this.fetchStock(this.props.sign);\n//   }\n\n//   componentDidUpdate(prevProps) {\n//     if (this.props.sign !== prevProps.sign) {\n//       this.fetchStock(this.props.sign);\n//     }\n//   }\n\n//   fetchStock(StockSymbol) {\n//     const API_KEY = \"HGJWFG4N8AQ66ICD\";\n\n//     let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${StockSymbol}&outputsize=compact&apikey=${API_KEY}`;\n\n//     let stockChartXValuesFunction = [];\n//     let stockChartYValuesFunction = [];\n\n//     fetch(API_Call)\n//       .then(function(response) {\n//         return response.json();\n//       })\n//       .then(\n//         function(data) {\n//           console.log(data);\n\n//           for (var key in data[\"Time Series (Daily)\"]) {\n//             stockChartXValuesFunction.push(key);\n//             stockChartYValuesFunction.push(\n//               data[\"Time Series (Daily)\"][key][\"1. open\"]\n//             );\n//           }\n\n//           this.setState({\n//             stockChartXValues: stockChartXValuesFunction,\n//             stockChartYValues: stockChartYValuesFunction,\n//             prediction: \"2\", // update prediction when new stock data is fetched\n//           });\n//         }.bind(this)\n//       );\n//   }\n\n//   render() {\n//     return (\n//       <div>\n//         <Plot\n//           data={[\n//             {\n//               x: this.state.stockChartXValues,\n//               y: this.state.stockChartYValues,\n//               type: \"scatter\",\n//               mode: \"lines+markers\",\n//               marker: { color: \"red\" },\n//             },\n//           ]}\n//           layout={{\n//             width: 720,\n//             height: 440,\n//             title: `${this.props.sign} Chart`,\n//           }}\n//         />\n//         {this.props.sign &&\n//         this.state.prediction !== null && ( // render prediction only when sign is truthy and prediction is not null\n//             <div>\n//               The prediction is that this stock goes{\" \"}\n//               <span style={{ whiteSpace: \"nowrap\" }}>\n//                 <Prediction pred={this.state.prediction} />\n//               </span>{\" \"}\n//               in price.\n//             </div>\n//           )}\n//       </div>\n//     );\n//   }\n// }\n\n// export default Stock;\n\n// import React, { Component } from \"react\";\n// import Plot from \"react-plotly.js\";\n// import Prediction from \"./Prediction\";\n\n// class Stock extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       stockChartXValues: [],\n//       stockChartYValues: [],\n//       prediction: null,\n//     };\n//   }\n\n//   componentDidMount() {\n//     this.fetchStock(this.props.sign);\n//   }\n\n//   componentDidUpdate(prevProps) {\n//     if (this.props.sign !== prevProps.sign) {\n//       this.fetchStock(this.props.sign);\n//     }\n//   }\n\n//   fetchStock(StockSymbol) {\n//     const API_KEY = \"HGJWFG4N8AQ66ICD\";\n\n//     let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${StockSymbol}&outputsize=compact&apikey=${API_KEY}`;\n\n//     let stockChartXValuesFunction = [];\n//     let stockChartYValuesFunction = [];\n\n//     fetch(API_Call)\n//       .then(function(response) {\n//         return response.json();\n//       })\n//       .then(\n//         function(data) {\n//           console.log(data);\n\n//           for (var key in data[\"Time Series (Daily)\"]) {\n//             stockChartXValuesFunction.push(key);\n//             stockChartYValuesFunction.push(\n//               data[\"Time Series (Daily)\"][key][\"1. open\"]\n//             );\n//           }\n\n//           const prediction = this.handlePrediction(stockChartYValuesFunction);\n\n//           this.setState({\n//             stockChartXValues: stockChartXValuesFunction,\n//             stockChartYValues: stockChartYValuesFunction,\n//             prediction: prediction,\n//           });\n//         }.bind(this)\n//       );\n//   }\n\n//   handlePrediction(stockData) {\n//     const len = stockData.length;\n//     const priceToday = parseFloat(stockData[len - 1]);\n//     const priceYesterday = parseFloat(stockData[len - 2]);\n\n//     if (priceToday > priceYesterday) {\n//       return \"up\";\n//     } else if (priceToday < priceYesterday) {\n//       return \"down\";\n//     } else {\n//       return \"unchanged\";\n//     }\n//   }\n\n//   render() {\n//     return (\n//       <div>\n//         <Plot\n//           data={[\n//             {\n//               x: this.state.stockChartXValues,\n//               y: this.state.stockChartYValues,\n//               type: \"scatter\",\n//               mode: \"lines+markers\",\n//               marker: { color: \"red\" },\n//             },\n//           ]}\n//           layout={{\n//             width: 720,\n//             height: 440,\n//             title: `${this.props.sign} Chart`,\n//           }}\n//         />\n//         {this.props.sign && this.state.prediction !== null && (\n//           <div>\n//             The prediction is that this stock goes{\" \"}\n//             <span style={{ whiteSpace: \"nowrap\" }}>\n//               <Prediction pred={this.state.prediction} />\n//             </span>{\" \"}\n//             in price.\n//           </div>\n//         )}\n//       </div>\n//     );\n//   }\n// }\n\n// export default Stock;\n\n// import React, { Component } from \"react\";\n// import Plot from \"react-plotly.js\";\n// import Prediction from \"./Prediction\";\n\n// class Stock extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       stockChartXValues: [],\n//       stockChartYValues: [],\n//       prediction: null, // set initial value of prediction to null\n//     };\n//   }\n\n//   componentDidMount() {\n//     this.fetchStock(this.props.sign);\n//   }\n\n//   componentDidUpdate(prevProps) {\n//     if (this.props.sign !== prevProps.sign) {\n//       this.fetchStock(this.props.sign);\n//     }\n//   }\n\n//   fetchStock(StockSymbol) {\n//     const API_KEY = \"HGJWFG4N8AQ66ICD\";\n\n//     let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${StockSymbol}&outputsize=compact&apikey=${API_KEY}`;\n\n//     let stockChartXValuesFunction = [];\n//     let stockChartYValuesFunction = [];\n\n//     fetch(API_Call)\n//       .then(function(response) {\n//         return response.json();\n//       })\n//       .then(\n//         function(data) {\n//           console.log(data);\n\n//           for (var key in data[\"Time Series (Daily)\"]) {\n//             stockChartXValuesFunction.push(key);\n//             stockChartYValuesFunction.push(\n//               data[\"Time Series (Daily)\"][key][\"1. open\"]\n//             );\n//           }\n\n//           this.setState({\n//             stockChartXValues: stockChartXValuesFunction,\n//             stockChartYValues: stockChartYValuesFunction,\n//           });\n\n//           this.getPrediction(data);\n//         }.bind(this)\n//       );\n//   }\n\n//   getPrediction(stockData) {\n//     // Perform some logic to calculate the prediction\n//     // and update the state with the new prediction value\n//     this.setState({ prediction: \"2\" });\n//   }\n\n//   render() {\n//     return (\n//       <div>\n//         <Plot\n//           data={[\n//             {\n//               x: this.state.stockChartXValues,\n//               y: this.state.stockChartYValues,\n//               type: \"scatter\",\n//               mode: \"lines+markers\",\n//               marker: { color: \"red\" },\n//             },\n//           ]}\n//           layout={{\n//             width: 720,\n//             height: 440,\n//             title: `${this.props.sign} Chart`,\n//           }}\n//         />\n//         {this.props.sign &&\n//         this.state.prediction !== null && ( // render prediction only when sign is truthy and prediction is not null\n//             <div>\n//               The prediction is that this stock goes{\" \"}\n//               <span style={{ whiteSpace: \"nowrap\" }}>\n//                 <Prediction pred={this.state.prediction} />\n//               </span>{\" \"}\n//               in price.\n//             </div>\n//           )}\n//       </div>\n//     );\n//   }\n// }\n\n// export default Stock;\n\n// import React, { Component } from \"react\";\n// import Plot from \"react-plotly.js\";\n// import Prediction from \"./Prediction\";\n\n// class Stock extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       stockChartXValues: [],\n//       stockChartYValues: [],\n//       prediction: null, // set initial value of prediction to null\n//     };\n//     this.handleSubmit = this.handleSubmit.bind(this);\n//   }\n\n//   componentDidMount() {\n//     this.fetchStock(this.props.sign);\n//   }\n\n//   componentDidUpdate(prevProps) {\n//     if (this.props.sign !== prevProps.sign) {\n//       this.fetchStock(this.props.sign);\n//     }\n//   }\n\n//   fetchStock(StockSymbol) {\n//     const API_KEY = \"HGJWFG4N8AQ66ICD\";\n\n//     let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${StockSymbol}&outputsize=compact&apikey=${API_KEY}`;\n\n//     let stockChartXValuesFunction = [];\n//     let stockChartYValuesFunction = [];\n\n//     fetch(API_Call)\n//       .then(function(response) {\n//         return response.json();\n//       })\n//       .then(\n//         function(data) {\n//           console.log(data);\n\n//           for (var key in data[\"Time Series (Daily)\"]) {\n//             stockChartXValuesFunction.push(key);\n//             stockChartYValuesFunction.push(\n//               data[\"Time Series (Daily)\"][key][\"1. open\"]\n//             );\n//           }\n\n//           this.setState({\n//             stockChartXValues: stockChartXValuesFunction,\n//             stockChartYValues: stockChartYValuesFunction,\n//           });\n\n//           this.getPrediction(data);\n//         }.bind(this)\n//       );\n//   }\n\n//   getPrediction(stockData) {\n//     // Perform some logic to calculate the prediction\n//     // and update the state with the new prediction value\n//     this.setState({ prediction: \"2\" });\n//   }\n\n//   handleSubmit(event) {\n//     event.preventDefault();\n//     this.fetchStock(event.target.stockInput.value);\n//   }\n\n//   render() {\n//     return (\n//       <div>\n//         <form onSubmit={this.handleSubmit}>\n//           <input type=\"text\" id=\"stockInput\" />\n//           <button type=\"submit\">Search</button>\n//         </form>\n//         <Plot\n//           data={[\n//             {\n//               x: this.state.stockChartXValues,\n//               y: this.state.stockChartYValues,\n//               type: \"scatter\",\n//               mode: \"lines+markers\",\n//               marker: { color: \"red\" },\n//             },\n//           ]}\n//           layout={{\n//             width: 720,\n//             height: 440,\n//             title: `${this.props.sign} Chart`,\n//           }}\n//         />\n//         {this.props.sign &&\n//         this.state.prediction !== null && ( // render prediction only when sign is truthy and prediction is not null\n//             <div>\n//               The prediction is that this stock goes{\" \"}\n//               <span style={{ whiteSpace: \"nowrap\" }}>\n//                 <Prediction pred={this.state.prediction} />\n//               </span>{\" \"}\n//               in price.\n//             </div>\n//           )}\n//       </div>\n//     );\n//   }\n// }\n\n// export default Stock;\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module"}